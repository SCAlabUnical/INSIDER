@startuml Workflow Service Optimizer

!define RECTANGLE class
skinparam componentStyle rectangle
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam padding 6
skinparam packagePadding 10
skinparam nodesep 45
skinparam ranksep 60

'Layout optimization
left to right direction

'Client Side
package "Client" {
  [Web Browser] as Browser
}

'Frontend Components
package "ecc-workflow-designer" {
  [Nginx Web Server] as Nginx
  [Static Files (HTML/CSS/JS)] as Static
  
  package "Frontend Core" {
    [app.js] as AppJs
    [index.html] as IndexHtml
  }
  
  package "UI Components" {
    [CSS Styles] as Styles
    [Assets] as Assets
  }
  
  package "Designer Components" {
    [Flowchart Editor] as FlowchartEditor
    [Design Tools] as DesignTools
  }
  
  package "Catalog Management" {
    [Service Catalogs] as FrontendCatalogs
  }
}

'Backend Components
package "ecc-workflow-api-server" {
  [Django API Server] as Django
  
  package "Core Configuration" {
    [Settings] as Settings
    [URLs] as Urls
  }
  
  package "API Layer" {
    [API Endpoints] as API
    [Views] as Views
  }
  
  package "Solving Strategies" {
    [LLM Strategy] as LLMStrategy
    [Linear Strategy] as LinearStrategy
  }
  
  package "Static Assets" {
    [Backend Static Files] as BackendStatic
  }
  
  package "Deployment" {
    [Docker Configuration] as DockerConfig
  }
}

'Data layer at the bottom for clear separation
package "Data" {
  [Service Catalog] as Catalog
  [Workflow Definitions] as Workflows
}

'Relationships
'Client to Frontend
Browser --> Nginx : HTTP Requests
Nginx -right-> Static : serves
Nginx -down-> Django : /api/ proxy

'Frontend Internal
Nginx -down-> IndexHtml : serves
IndexHtml --> AppJs : loads
AppJs --> FlowchartEditor : initializes
AppJs --> DesignTools : uses
FlowchartEditor --> Styles : styled by
FlowchartEditor --> Assets : uses
FlowchartEditor --> FrontendCatalogs : reads

'Frontend to Backend
AppJs -down-> API : AJAX requests

'Backend Internal
Django -right-> Urls : routes through
Urls --> API : maps to
API --> Views : uses

'Solving Logic
API -down-> LLMStrategy : uses
API -down-> LinearStrategy : uses

'Data Access
LLMStrategy --> Catalog : references
LinearStrategy --> Catalog : references
LLMStrategy --> Workflows : optimizes
LinearStrategy --> Workflows : optimizes

'Deployment
DockerConfig --> Django : containerizes

@enduml